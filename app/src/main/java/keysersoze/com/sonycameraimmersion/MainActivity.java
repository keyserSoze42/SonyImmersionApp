package keysersoze.com.sonycameraimmersion;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.google.android.glass.widget.Slider;
import com.keysersoze.sonyandroidlib.CameraConnectionController;
import com.keysersoze.sonyandroidlib.CameraSettingsController;
import com.keysersoze.sonyandroidlib.IsSupportedUtil;
import com.keysersoze.sonyandroidlib.SimpleStreamSurfaceView;
import com.keysersoze.sonyandroidlib.ViewFinderLayout;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ProgressBar;

import java.io.IOException;

import sony.sdk.cameraremote.ServerDevice;
import sony.sdk.cameraremote.SimpleRemoteApi;
import sony.sdk.cameraremote.SimpleSsdpClient;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    //private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private CameraConnectionController cameraConnectionController;
    private SimpleSsdpClient ssdpClient;
    private static SimpleRemoteApi mRemoteApi;
    private SimpleStreamSurfaceView liveViewFinder;
    private Slider mSlider;
    private Slider.Indeterminate mIndeterminate;
    private GestureDetector mGestureDetector;
    private String TAG = MainActivity.class.getSimpleName();

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        setContentView(R.layout.view_finder_layout);
        ssdpClient = new SimpleSsdpClient();
        liveViewFinder = (SimpleStreamSurfaceView) findViewById(R.id.liveViewFinder);
        ssdpClient.search(searchResultHandler);
        mGestureDetector = createGestureDetector(this);
    }

    SimpleSsdpClient.SearchResultHandler searchResultHandler = new SimpleSsdpClient.SearchResultHandler() {
        @Override
        public void onDeviceFound(ServerDevice serverDevice) {
            mRemoteApi = SimpleRemoteApi.getInstance();
            mRemoteApi.init(serverDevice);
            cameraConnectionController.onDeviceFound(serverDevice);
        }

        @Override
        public void onFinished() {
            CameraConnectionController.openConnection();
        }

        @Override
        public void onErrorFinished() {

        }
    };

    private GestureDetector createGestureDetector(Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener( new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                if (gesture == Gesture.TAP) {
                    new Thread(){
                        @Override
                        public void run() {
                            try {
                                mRemoteApi.actHalfPressShutter();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }.start();
                    return true;
                } else if (gesture == Gesture.TWO_TAP) {
                    // do something on two finger tap
                    return true;
                } else if (gesture == Gesture.SWIPE_RIGHT) {
                    // do something on right (forward) swipe
                    return true;
                } else if (gesture == Gesture.SWIPE_LEFT) {
                    // do something on left (backwards) swipe
                    return true;
                }
                return false;
            }
        });
        gestureDetector.setFingerListener(new GestureDetector.FingerListener() {
            @Override
            public void onFingerCountChanged(int previousCount, int currentCount) {
                // do something on finger count changes
            }
        });
        gestureDetector.setScrollListener(new GestureDetector.ScrollListener() {
            @Override
            public boolean onScroll(float displacement, float delta, float velocity) {
                // do something on scrolling
                return true;
            }
        });
        return gestureDetector;
    }

    /*
     * Send generic motion events to the gesture detector
     */
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }

    @Override
    protected void onResume() {
        super.onResume();
        mSlider = Slider.from(liveViewFinder);
        mIndeterminate = mSlider.startIndeterminate();
        mIndeterminate.show();
        CameraConnectionController.CameraConnectionHandler cameraConnectionHandler = new CameraConnectionController.CameraConnectionHandler() {
            @Override
            public void onCameraConnected() {
                // Liveview start
                mIndeterminate.hide();
                mIndeterminate = null;
                liveViewFinder.setVisibility(View.VISIBLE);
                if (IsSupportedUtil.isCameraApiAvailable("startLiveview", cameraConnectionController.getApiSet())) {
                    Log.d(TAG, "openConnection(): LiveviewSurface.start()");
                    String liveViewUrl = cameraConnectionController.startLiveview();

                    liveViewFinder.start(liveViewUrl, //
                        new ViewFinderLayout.StreamErrorListener() {

                            @Override
                            public void onError(StreamErrorReason reason) {
                                cameraConnectionController.stopLiveview();
                            }
                        });
                }
            }

            @Override
            public void onCameraReady() {

            }
        };
        cameraConnectionController = new CameraConnectionController(this, cameraConnectionHandler);
        //mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        //mCardScroller.deactivate();
        if (liveViewFinder != null) {
            liveViewFinder.stop();
            liveViewFinder = null;
            cameraConnectionController.stopLiveview();
            cameraConnectionController = null;
        }
        super.onPause();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event){
        if(keyCode == KeyEvent.KEYCODE_CAMERA) {
                new Thread(){
                    @Override
                    public void run() {
                        try {
                            mRemoteApi.actTakePicture();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }.start();
            return true;
        }else {
            return super.onKeyDown(keyCode, event);
        }

    }
}
